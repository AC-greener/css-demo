function Promise(fn) {
  var self = this
  self.state = null
  self.successData = undefined
  self.failData = undefined
  function resolve(data) {
   self.state = 'success'
   self.successData = data
  }
  function reject(err) {
    self.state = 'fail'
    self.failData = err 
  }
  fn(resolve, reject)
  return {
    then: function(fn1, fn2) {
      if(self.state === 'success') {
        fn1(self.successData)
      } else if(self.state === 'fail') {
        fn2(self.failData)
      }
    }
  }
}
// 实现超出JS整数存储范围的两个大整数（含负数）相加 function add(a, b) 
function add(x, y) {
  var s1 = x.toString()
  var s2 = y.toString()
  var length1 = s1.length
  var length2 = s2.length
  var minLen
  var restStr = ''
  if(length1 > length2) {
    minLen = length2
    restStr = s1.slice(length2)
  } else {
    minLen = length1
    restStr = s2.slice(length1)
  }

  s1 = s1.split('')
  s2 = s2.split('')
  var result = []
  for(var n = 0; n < maxLen; n++) {
    result[n] = 0
  }

  var k = 0
  for(var i = minLen-1; i >= 0; i++) {
      var temp = Number(s1[i]) + Number(s2[i])
      if(temp >= 10) {
        var flag = 1
        temp = temp % 10
      }
      result[k+1] += flag
      result[k++] = temp
  }
  result = restStr.concat(result.join('').reverse())
  return Number(result)
}




function test() {
  return new Promise((resolve, reject) => {

  })
}
test.then((data) => {

}, (err) => {

})
